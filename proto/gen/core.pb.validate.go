// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BaseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseRequestMultiError, or
// nil if none found.
func (m *BaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	// no validation rules for RequestOrigin

	// no validation rules for RequestPath

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.UserType != nil {
		// no validation rules for UserType
	}

	if len(errors) > 0 {
		return BaseRequestMultiError(errors)
	}

	return nil
}

// BaseRequestMultiError is an error wrapping multiple validation errors
// returned by BaseRequest.ValidateAll() if the designated constraints aren't met.
type BaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseRequestMultiError) AllErrors() []error { return m }

// BaseRequestValidationError is the validation error returned by
// BaseRequest.Validate if the designated constraints aren't met.
type BaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseRequestValidationError) ErrorName() string { return "BaseRequestValidationError" }

// Error satisfies the builtin error interface
func (e BaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseRequestValidationError{}

// Validate checks the field values on BaseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseResponseMultiError, or
// nil if none found.
func (m *BaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Desc

	if len(errors) > 0 {
		return BaseResponseMultiError(errors)
	}

	return nil
}

// BaseResponseMultiError is an error wrapping multiple validation errors
// returned by BaseResponse.ValidateAll() if the designated constraints aren't met.
type BaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseResponseMultiError) AllErrors() []error { return m }

// BaseResponseValidationError is the validation error returned by
// BaseResponse.Validate if the designated constraints aren't met.
type BaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseResponseValidationError) ErrorName() string { return "BaseResponseValidationError" }

// Error satisfies the builtin error interface
func (e BaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseResponseValidationError{}

// Validate checks the field values on GenericRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenericRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenericRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenericRequestMultiError,
// or nil if none found.
func (m *GenericRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenericRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenericRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenericRequestValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenericRequestValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenericRequestMultiError(errors)
	}

	return nil
}

// GenericRequestMultiError is an error wrapping multiple validation errors
// returned by GenericRequest.ValidateAll() if the designated constraints
// aren't met.
type GenericRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenericRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenericRequestMultiError) AllErrors() []error { return m }

// GenericRequestValidationError is the validation error returned by
// GenericRequest.Validate if the designated constraints aren't met.
type GenericRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenericRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenericRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenericRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenericRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenericRequestValidationError) ErrorName() string { return "GenericRequestValidationError" }

// Error satisfies the builtin error interface
func (e GenericRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenericRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenericRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenericRequestValidationError{}

// Validate checks the field values on GenericResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenericResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenericResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenericResponseMultiError, or nil if none found.
func (m *GenericResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenericResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenericResponseValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenericResponseValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenericResponseValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenericResponseMultiError(errors)
	}

	return nil
}

// GenericResponseMultiError is an error wrapping multiple validation errors
// returned by GenericResponse.ValidateAll() if the designated constraints
// aren't met.
type GenericResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenericResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenericResponseMultiError) AllErrors() []error { return m }

// GenericResponseValidationError is the validation error returned by
// GenericResponse.Validate if the designated constraints aren't met.
type GenericResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenericResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenericResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenericResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenericResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenericResponseValidationError) ErrorName() string { return "GenericResponseValidationError" }

// Error satisfies the builtin error interface
func (e GenericResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenericResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenericResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenericResponseValidationError{}
